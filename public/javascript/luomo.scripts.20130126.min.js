function colorToHex(b) {
    if (b.substr(0, 1) === "#") {
        return b
    }
    var e = /(.*?)rgb\((\d+), (\d+), (\d+)\)/.exec(b);
    var f = parseInt(e[2], 10);
    var d = parseInt(e[3], 10);
    var a = parseInt(e[4], 10);
    var c = a | (d << 8) | (f << 16);
    return e[1] + "#" + c.toString(16)
}
function getContrast50(a) {
    return (parseInt(a, 16) > 16777215 / 2) ? "light" : "dark"
}
function getContrastYIQ(f) {
    var d = parseInt(f.substr(0, 2), 16);
    var c = parseInt(f.substr(2, 2), 16);
    var a = parseInt(f.substr(4, 2), 16);
    var e = ((d * 299) + (c * 587) + (a * 114)) / 1000;
    return (e >= 128) ? "light" : "dark"
}
var user_rules = "";
(function (a) {
    if (a("html").hasClass("ie")) {
        finalizePosts();
        return
    }
    a(".post").each(function () {
        var j = a(this),
            d = j.attr("id"),
            n = j.attr("class");
        var i = n.match(/bg_[a-f0-9]{6}/),
            e = n.match(/body_[a-f0-9]{6}/),
            c = n.match(/info_[a-f0-9]{6}/),
            l = n.match(/accent_[a-f0-9]{6}/),
            f = n.match(/link_[a-f0-9]{6}/);
        if (i) {
            var k = String(i).substring(3);
            user_rules += ".post_" + d + " { background-color: #" + k + " !important; }\n";
            user_rules += ".post_" + d + " .post_footer .tag_list .tags a { color: #" + k + " !important; }\n";
            user_rules += ".post_" + d + ".dark .post_footer .tag_list .tags a { color: #" + k + " !important; }\n";
            user_rules += ".post_" + d + ".light .post_footer .tag_list .tags a { color: #" + k + " !important; }\n";
            user_rules += ".post_" + d + " .post_footer .tag_list .tags a:hover { color: #" + k + " !important; }\n";
            user_rules += ".post_" + d + " .flex-direction-nav a { background-color: #" + k + " !important; }\n";
            user_rules += ".post_" + d + ".dark .flex-direction-nav a:hover { background-color: " + dark_post_accent + " !important; }\n";
            user_rules += ".post_" + d + ".light .flex-direction-nav a:hover { background-color: " + light_post_accent + " !important; }\n";
            if (!c) {
                user_rules += ".post_" + d + " .post_info_bar { background-color: #" + k + " !important; }\n";
                user_rules += ".post_" + d + " .post_info_bar .icon_link { background-color: #" + k + " !important; }\n";
                user_rules += ".post_" + d + " .post_info_bar li a { background-color: #" + k + " !important; }\n"
            }
            if (!l) {
                user_rules += ".post_" + d + ".dark .post_info_bar li a:hover { background-color: " + dark_post_accent + " !important; }\n";
                user_rules += ".post_" + d + ".light .post_info_bar li a:hover { background-color: " + light_post_accent + " !important; }\n"
            }
        }
        if (e) {
            var h = String(e).substring(5);
            user_rules += ".post_" + d + " .inner { background-color: #" + h + " !important; }\n"
        }
        if (c) {
            var b = String(c).substring(5);
            user_rules += ".post_" + d + " .post_info_bar { background-color: #" + b + " !important; }\n";
            user_rules += ".post_" + d + " .post_info_bar .icon_link { background-color: #" + b + " !important; }\n";
            user_rules += ".post_" + d + " .post_info_bar li a { background-color: #" + b + " !important; }\n";
            if (!l) {
                user_rules += ".post_" + d + ".dark .post_info_bar li a:hover { background-color: " + dark_post_accent + " !important; }\n";
                user_rules += ".post_" + d + ".light .post_info_bar li a:hover { background-color: " + light_post_accent + " !important; }\n"
            }
        }
        if (l) {
            var m = String(l).substring(7);
            user_rules += ".post_" + d + ".dark .post_info_bar li a:hover { background-color: #" + m + " !important; }\n";
            user_rules += ".post_" + d + ".light .post_info_bar li a:hover { background-color: #" + m + " !important; }\n";
            user_rules += ".post_" + d + ".dark .flex-direction-nav a:hover { background-color: #" + m + " !important; }\n";
            user_rules += ".post_" + d + ".light .flex-direction-nav a:hover { background-color: #" + m + " !important; }\n";
            user_rules += ".post_" + d + " .flex-control-nav .flex-active { background-color: #" + m + " !important; }\n";
            if (!f) {
                user_rules += ".post_" + d + " .cont a { color: #" + m + " !important; border-color: #" + m + " !important; }\n";
                user_rules += ".post_" + d + " .post_footer a:hover { color: #" + m + " !important; }\n";
                user_rules += ".post_" + d + ".dark .cont h2 a { color: " + dark_post_text + " !important; }\n";
                user_rules += ".post_" + d + ".light .cont h2 a { color: " + light_post_text + " !important; }\n";
                user_rules += ".post_" + d + ".dark .cont h2 a:hover { color: #" + m + " !important; }\n";
                user_rules += ".post_" + d + ".light .cont h2 a:hover { color: #" + m + " !important; }\n";
                user_rules += ".post_" + d + ".dark .cont.reverse h2 a { color: #" + m + " !important; }\n";
                user_rules += ".post_" + d + ".light .cont.reverse h2 a { color: #" + m + " !important; }\n";
                user_rules += ".post_" + d + ".dark .cont.reverse h2 a:hover { color: " + dark_post_text + " !important; }\n";
                user_rules += ".post_" + d + ".light .cont.reverse h2 a:hover { color: " + light_post_text + " !important; }\n"
            }
        }
        if (f) {
            var g = String(f).substring(5);
            user_rules += ".post_" + d + " .cont a { color: #" + g + " !important; border-color: #" + g + " !important; }\n";
            user_rules += ".post_" + d + " .post_footer a:hover { color: #" + g + " !important; }\n";
            user_rules += ".post_" + d + ".dark .cont h2 a { color: " + dark_post_text + " !important; }\n";
            user_rules += ".post_" + d + ".light .cont h2 a { color: " + light_post_text + " !important; }\n";
            user_rules += ".post_" + d + ".dark .cont h2 a:hover { color: #" + g + " !important; }\n";
            user_rules += ".post_" + d + ".light .cont h2 a:hover { color: #" + g + " !important; }\n";
            user_rules += ".post_" + d + ".dark .cont.reverse h2 a { color: #" + g + " !important; }\n";
            user_rules += ".post_" + d + ".light .cont.reverse h2 a { color: #" + g + " !important; }\n";
            user_rules += ".post_" + d + ".dark .cont.reverse h2 a:hover { color: " + dark_post_text + " !important; }\n";
            user_rules += ".post_" + d + ".light .cont.reverse h2 a:hover { color: " + light_post_text + " !important; }\n"
        }
        if (l || f) {
            user_rules += ".post_" + d + ".dark .cont a:hover { color: " + dark_post_link_hover + " !important; background-color: " + dark_post_link_hover_bg + " !important; border-color: " + dark_post_link_hover + " !important; }\n";
            user_rules += ".post_" + d + ".light .cont a:hover { color: " + light_post_link_hover + " !important; background-color: " + light_post_link_hover_bg + " !important; border-color: " + light_post_link_hover + " !important; }\n"
        }
    });
    if (user_rules.length > 0) {
        a("<style>").prop("type", "text/css").prop("media", "screen").append(user_rules).appendTo("head")
    }
    finalizePosts()
})(this.jQuery);

function finalizePosts() {
    $(".post").each(function () {
        var a = $(this),
            e = a.find("ul.tags li"),
            b = colorToHex(a.css("background-color")).replace(/#/, ""),
            d = getContrastYIQ(b),
            c;
        c = ["dark", "light", "red", "vermilion", "orange", "gold", "yellow", "lime", "green", "forest", "sea", "sky", "blue", "indigo", "purple", "magenta", "lipstick", "torch", "desaturate", "darken", "lighten"];
        e.each(function () {
            var f = $(this),
                g = f.find("a").text().toLowerCase();
            if (g.match(/[a-f0-9]{6}/) || $.inArray(g, c) > -1) {
                f.remove()
            }
        });
        e = a.find("ul.tags li");
        if (e.size() === 0) {
            a.find(".tag_list").remove()
        }
        if (!a.hasClass("light") && !a.hasClass("dark")) {
            a.addClass(d)
        }
        a.fadeIn(200)
    })
}(function (c) {
    if (window.devicePixelRatio > 1) {
        var d = c("#logo_link img");
        d.attr("src", d.data("2x"))
    }
    c(".search_button").on("click", function () {
        var e = c("#modal_search_box"),
            f = e.find("input");
        f.attr("value", f.data("placeholder"));
        e.reveal({
            animation: "fade",
            speed: 200
        })
    });
    c("#filter_tags_mobile .trigger").on("click", function () {
        var e = c(this),
            f = e.siblings("ul");
        e.toggleClass("is_open");
        f.slideToggle(300)
    });
    var b = c("#back_to_top").css("display", "block").hide();
    c(window).scroll(function () {
        if (c(this).scrollTop() > 400) {
            b.fadeIn(200)
        } else {
            b.fadeOut(200)
        }
    });
    b.on("click", function (e) {
        e.preventDefault();
        c("body, html").animate({
            scrollTop: 0
        }, "fast")
    });
    if (disqus_shortname) {
        c(".post_info_bar a").each(function () {
            if (c(this).attr("href").indexOf("#disqus_thread") >= 0) {
                var f = c(this),
                    e = f.text().split(" ");
                if (e.length > 1) {
                    f.html('<span class="icon"></span><span class="legend">' + e[0] + ' <span class="hide_from_mobile">' + e[1] + "</span></span>")
                }
            }
        })
    }
    function a() {
        c(".spotify_audio_player").attr("src", function (e, f) {
            return f
        })
    }
    c(window).on("resize", debouncer(a, 400));
    a()
}(this.jQuery));
(function (a) {
    a(".is_photoset, .photoset").find(".flexslider").flexslider({})
}(this.jQuery));
(function (f) {
    var l = f(".footer_column").length;
    if (l > 1) {
        f(".blog_footer").addClass("multicols").addClass("cols" + l)
    } else {
        f(".blog_footer").addClass("singlecol")
    }
    var a = f(".twitter_feed"),
        q = a.data("username"),
        m = a.data("query"),
        n = a.data("count"),
        h = (a.data("avatar")) ? 60 : null;
    if (q) {
        a.tweet({
            username: q,
            query: m,
            count: n || 3,
            avatar_size: h,
            loading_text: "Loading tweets..."
        })
    }
    var c = f(".flickr_feed"),
        i = c.data("id"),
        d = c.data("count") || 6,
        r = c.data("group-feed");
    if (i) {
        c.jflickrfeed({
            limit: d,
            feedapi: (r) ? "groups_pool.gne" : "photos_public.gne",
            qstrings: {
                id: i
            },
            itemTemplate: '<li><a class="feed_item" href="{{link}}" title="{{title}}" target="_blank"><img src="{{image_q}}" alt="{{title}}"></a></li>'
        })
    }
    var o = f(".dribbble_feed"),
        p = o.data("username"),
        k = o.data("count") || 6;
    if (p) {
        f.jribbble.getShotsByPlayerId(p, function (t) {
            var u = [];
            f.each(t.shots, function (w, v) {
                u.push('<li><a class="feed_item" href="' + v.url + '" title="' + v.title + '" target="_blank">');
                u.push('<img src="' + v.image_teaser_url + '" alt="' + v.title + '"></a></li>')
            });
            o.html(u.join(""))
        }, {
            page: 1,
            per_page: k
        })
    }
    var j = f(".instagram_feed"),
        s = j.data("user-id"),
        g = j.data("access-token"),
        b = j.data("count") || 6;
    if (s && g) {
        j.jqinstapics({
            user_id: s,
            access_token: g,
            count: b
        })
    }
    function e() {
        f(".image_feed").each(function () {
            var t = f(this).find(".feed_item"),
                u = 0;
            t.each(function () {
                var v = f(this);
                v.removeAttr("style");
                u = Math.max(u, v.width())
            });
            t.css("width", Math.floor(u))
        })
    }
    f(window).load(e);
    f(window).on("resize", debouncer(e))
}(this.jQuery));
(function ($) {
    function getAudioData() {
        $(".is_audio.html_solution").each(function () {
            var _$post = $(this),
                _id = _$post.attr("id");
            var _url = document.location.protocol + "//" + document.location.hostname;
            if (_url.charAt(_url.length - 1) != "/") {
                _url += "/"
            }
            _url += "api/read/json?id=" + _id;
            $.get(_url, function (data) {
                try {
                    eval(data);
                    var _audio_player = $(tumblr_api_read.posts[0]["audio-player"]);
                    if (_audio_player.attr("type") === "application/x-shockwave-flash") {
                        var _src = _audio_player.attr("src"),
                            _soundcloud = (_src.indexOf("soundcloud") > -1),
                            _audio_file = decodeURIComponent(_src.split("audio_file=")[1].split("&")[0]);
                        if (!_soundcloud) {
                            var _last_seg = _audio_file.match(/tumblr_[a-zA-Z0-9]+/)[0];
                            _audio_file = "http://a.tumblr.com/" + _last_seg + "o1.mp3"
                        }
                        buildAudioPlayer(_id, _audio_file)
                    }
                } catch (err) {
                    log(err)
                }
            })
        })
    }
    function buildAudioPlayer(id, audio_file) {
        var _id = id,
            _audio_file = audio_file,
            _player_markup = "";
        _player_markup += '<div id="jquery_jplayer_' + _id + '" class="jp-jplayer"></div>';
        _player_markup += '<div id="jp_container_' + _id + '" class="jp-audio">';
        _player_markup += '<div class="jp-type-single">';
        _player_markup += '<div class="jp-gui jp-interface">';
        _player_markup += '<ul class="jp-controls clearfix">';
        _player_markup += '<li><a href="javascript:;" class="jp-play" tabindex="1">play</a></li>';
        _player_markup += '<li><a href="javascript:;" class="jp-pause" tabindex="1">pause</a></li>';
        _player_markup += "</ul>";
        _player_markup += '<div class="jp-progress">';
        _player_markup += '<div class="jp-seek-bar">';
        _player_markup += '<div class="jp-play-bar"></div>';
        _player_markup += "</div>";
        _player_markup += "</div>";
        _player_markup += "</div>";
        _player_markup += '<div class="jp-no-solution">You need the <a href="http://get.adobe.com/flashplayer/" target="_blank">Flash plugin</a> to play the media.</div>';
        _player_markup += "</div>";
        _player_markup += "</div>";
        $("#audio_player_" + _id).closest(".audio_player").html(_player_markup);
        $("#jquery_jplayer_" + _id).jPlayer({
            ready: function (evt) {
                $(this).jPlayer("setMedia", {
                    mp3: _audio_file
                })
            },
            error: function (evt) {
                log(evt.jPlayer.error.message + " " + evt.jPlayer.error.hint);
                log(evt.jPlayer.error.context)
            },
            play: function (evt) {
                $(this).jPlayer("pauseOthers")
            },
            cssSelectorAncestor: "#jp_container_" + _id,
            solution: "html, flash",
            supplied: "mp3",
            swfPath: "http://static.tumblr.com/6nxvfxq/tAjmh7g83/jplayer.swf",
            volume: 1
        })
    }
    getAudioData()
}(this.jQuery));
(function ($, window, document) {
    function fixVideoPosts() {
        var _vidCounter = 0;
        $(".is_video").each(function () {
            var _$post = $(this),
                _id = _$post.attr("id");
            var _url = document.location.protocol + "//" + document.location.hostname;
            if (_url.charAt(_url.length - 1) != "/") {
                _url += "/"
            }
            _url += "api/read/json?id=" + _id;
            _vidCounter += 1;
            $.get(_url, function (data) {
                try {
                    eval(data);
                    if (0 < --_vidCounter) {
                        _$post.find(".tumblr_video_container").html($(tumblr_api_read.posts[0]["video-player-500"]))
                    } else {
                        _$post.find(".tumblr_video_container").html($(tumblr_api_read.posts[0]["video-player-500"]));
                        applyFitVid()
                    }
                } catch (err) {
                    log("Error caught");
                    applyFitVid()
                }
            })
        })
    }
    function applyFitVid() {
        $(".is_video").fitVids({
            customSelector: "iframe[src*='www.tumblr.com'], iframe[src^='https://embed.spotify.com']"
        }).find(".video_wrapper").css({
            opacity: 1
        })
    }
    fixVideoPosts()
}(jQuery, window, document));

function debouncer(b, c) {
    var d, a = c || 200;
    return function () {
        var e = this,
            f = arguments;
        clearTimeout(d);
        d = setTimeout(function () {
            b.apply(e, Array.prototype.slice.call(f))
        }, a)
    }
};
